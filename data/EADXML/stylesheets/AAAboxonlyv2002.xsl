<!-- stephboxonly generated by Steph 68/25 using Loren's stylesheet generated by Loren 1/31/02 from EAD Cookbook Style 2 and Michael Fox's changes to the container list Version 0.9   2000 July 22; incorporating changes attempting to accomodate EAD Cookbook v. 2  -->
<!--  This stylesheet generates Style 2 and Michael Fox's addition for boxes which has a Table of Contents in an HTML table cell along the left side of the screen. It may be used when an HTML frame is not desired.  -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
<xsl:output method="html" indent="yes" encoding="UTF-8"/>
<xsl:strip-space elements="*"/>


<!-- Creates the body of the finding aid.-->
<xsl:template match="/">
<xsl:variable name="file">
<xsl:value-of select="ead/eadheader/eadid"/>
</xsl:variable>
<html>
<head>
<style>
h1, h2, h3, h4 {font-family: arial}
</style>

<title>
<!-- Loren took out <xsl:value-of select="ead/eadheader/filedesc/titlestmt/titleproper"/>
<xsl:text>  </xsl:text>-->
<xsl:value-of select="ead/eadheader/filedesc/titlestmt/subtitle"/>
</title>

<xsl:element name="meta">
<xsl:attribute name="name">dc.title</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="ead/eadheader/filedesc/titlestmt/titleproper"/>
<xsl:text>  </xsl:text>
<xsl:value-of select="ead/eadheader/filedesc/titlestmt/subtitle"/>
</xsl:attribute>
</xsl:element>

<xsl:element name="meta">
<xsl:attribute name="name">dc.author</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="ead/archdesc/did/origination"/>
</xsl:attribute>
</xsl:element>

<xsl:for-each select="ead//controlaccess/persname | ead//controlaccess/corpname">
<xsl:choose>
<xsl:when test="@encodinganalog='600'">
<xsl:element name="meta">
<xsl:attribute name="name">dc.subject</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:when>

<xsl:when test="@encodinganalog='610'">
<xsl:element name="meta">
<xsl:attribute name="name">dc.subject</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:when>

<xsl:when test="@encodinganalog='611'">
<xsl:element name="meta">
<xsl:attribute name="name">dc.subject</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:when>

<xsl:when test="@encodinganalog='700'">
<xsl:element name="meta">
<xsl:attribute name="name">dc.contributor</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:when>

<xsl:when test="@encodinganalog='710'">
<xsl:element name="meta">
<xsl:attribute name="name">dc.contributor</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:when>

<xsl:otherwise>
<xsl:element name="meta">
<xsl:attribute name="name">dc.contributor</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>

<xsl:for-each select="ead//controlaccess/subject">
<xsl:element name="meta">
<xsl:attribute name="name">dc.subject</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:for-each>

<xsl:element name="meta">
<xsl:attribute name="name">dc.title</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="ead/archdesc/did/unittitle"/>
</xsl:attribute>
</xsl:element>

<xsl:element name="meta">
<xsl:attribute name="name">dc.type</xsl:attribute>
<xsl:attribute name="content">text</xsl:attribute>
</xsl:element>

<xsl:element name="meta">
<xsl:attribute name="name">dc.format</xsl:attribute>
<xsl:attribute name="content">manuscripts</xsl:attribute>
</xsl:element>

<xsl:element name="meta">
<xsl:attribute name="name">dc.format</xsl:attribute>
<xsl:attribute name="content">finding aids</xsl:attribute>
</xsl:element>

<xsl:for-each select="ead//controlaccess/geogname">
<xsl:element name="meta">
<xsl:attribute name="name">dc.coverage</xsl:attribute>
<xsl:attribute name="content">
<xsl:value-of select="."/>
</xsl:attribute>
</xsl:element>
</xsl:for-each>

</head>


<body>
<table width="100%" cellpadding="5">
<tr><td width="20%"></td><td width="80%"></td></tr>
<tr>
<td valign="top" bgcolor="#CCCCCC"><xsl:call-template name="toc"/></td>
<td valign="top" bgcolor="#FFFFFF"><xsl:call-template name="body"/></td>
</tr>
</table>
</body>
</html>
</xsl:template>


<xsl:template name="toc">
<xsl:variable name="file">
<xsl:value-of select="ead/eadheader/eadid"/>
</xsl:variable>

<h3>TABLE OF CONTENTS</h3>
<br></br>


<!-- A series of tests determine which elements will be included in the table of contents.-->
<xsl:if test="ead/archdesc/did">
<p><b><a href="#a1">
<xsl:value-of select="ead/archdesc/did/head"/>
</a></b></p>
</xsl:if>
<!--Loren changed the order -->
<xsl:if test="ead/archdesc/acqinfo[string-length(text()|*)!=0] | ead/archdesc/processinfo[string-length(text()|*)!=0] |  ead/archdesc/prefercite[string-length(text()|*)!=0] | ead/archdesc/custodialhist[string-length(text()|*)!=0] | ead/archdesc/altformavail[string-length(text()|*)!=0] | ead/archdesc/appraisal[string-length(text()|*)!=0] | ead/archdesc/accruals[string-length(text()|*)!=0] | ead/archdesc/originalsloc[string-length(text()|*)!=0]">
</xsl:if>

<!--Steph added this -->

<xsl:if test="ead/archdesc/acqinfo[string-length(text()|*)!=0] | ead/archdesc/processinfo[string-length(text()|*)!=0] | ead/archdesc/prefercite[string-length(text()|*)!=0] | ead/archdesc/custodialhist[string-length(text()|*)!=0] | ead/archdesc/altformavail[string-length(text()|*)!=0] | ead/archdesc/appraisal[string-length(text()|*)!=0] | ead/archdesc/accruals[string-length(text()|*)!=0] | ead/archdesc/originalsloc[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a14">
<xsl:text>Administrative Information</xsl:text>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/userestrict[string-length(text()|*)!=0] | ead/archdesc/accessrestrict[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a14">
<xsl:text>Restrictions</xsl:text>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/controlaccess[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a12">
<xsl:value-of select="ead/archdesc/controlaccess/head"/>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/relatedmaterial[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a6">
Related Material
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/separatedmaterial[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a7">
Separated Material
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/otherfindaid[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a8">
<xsl:value-of select="ead/archdesc/otherfindaid/head"/>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/bioghist[string-length(text()|*)!=0]">
<p style="margin-top:-5pt">
<b>
<a href="#a2">
<xsl:value-of select="ead/archdesc/bioghist/head"/>
</a>
</b></p>
</xsl:if>

<xsl:if test="ead/archdesc/scopecontent[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a3">
<xsl:value-of select="ead/archdesc/scopecontent/head"/>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/arrangement[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a4">
<xsl:value-of select="ead/archdesc/arrangement/head"/>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/dsc[string-length(text()|*)!=0]">
<a href="#a23">
<p style="margin-top:-5pt">
<b>
<xsl:value-of select="ead/archdesc/dsc/head"/>
</b></p>
</a>


<!-- Displays the title and date of each series and numbers
 them to form a hyperlink to them.-->
<xsl:for-each select="ead/archdesc/dsc/c01">
<p style="margin-left:10pt; margin-top:-5pt"><b>
<font size="-1">
<a>
<xsl:attribute name="href">
#series<xsl:number value="position()" format="1"/>
</xsl:attribute>
<xsl:choose>
<xsl:when test="did/unittitle/unitdate">
<xsl:for-each select="did/unittitle">
<!-- Loren replaced lines below 
<xsl:value-of select="text()"/>
<xsl:text> </xsl:text>
<xsl:apply-templates select="./unitdate"/> -->
<xsl:apply-templates select="."/>
<!-- Loren end replace -->
</xsl:for-each>
</xsl:when>
<xsl:otherwise>
<xsl:apply-templates select="did/unittitle"/>
<xsl:text> </xsl:text>
<xsl:apply-templates select="did/unitdate"/>
</xsl:otherwise>
</xsl:choose>
</a>
</font></b></p>
</xsl:for-each>

<!-- Displays each appendix and forms a hyperlink to them.-->
<xsl:if test="ead/archdesc/odd[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/odd/head">
<p style="margin-top:-5pt"><b>
<a>
<xsl:attribute name="href">#appendix<xsl:number value="position()" format="1"/>
</xsl:attribute>
<xsl:value-of select="."/>
</a></b></p>
</xsl:for-each>
</xsl:if>


<xsl:if test="ead/archdesc/bibliography[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a10">
<xsl:value-of select="ead/archdesc/bibliography/head"/>
</a></b></p>
</xsl:if>

<xsl:if test="ead/archdesc/index[string-length(text()|*)!=0]">
<p style="margin-top:-5pt"><b>
<a href="#a9">
<xsl:value-of select="ead/archdesc/index/head"/>
</a></b></p>
</xsl:if>

</xsl:if>
</xsl:template>

<xsl:template name="body">
<xsl:variable name="file">
<xsl:value-of select="ead/eadheader/eadid"/>
</xsl:variable>

<!-- Loren changed the order -->
<xsl:call-template name="eadheader"/>
<xsl:call-template name="archdesc-did"/>
<xsl:call-template name="archdesc-admininfo"/>
<xsl:call-template name="archdesc-restrict"/>
<xsl:call-template name="archdesc-control"/>
<xsl:call-template name="archdesc-relatedmaterial"/>
<xsl:call-template name="archdesc-separatedmaterial"/>
<xsl:call-template name="archdesc-otherfindaid"/>
<xsl:call-template name="archdesc-bioghist"/>
<xsl:call-template name="archdesc-scopecontent"/>
<xsl:call-template name="archdesc-arrangement"/>
<xsl:call-template name="dsc"/>
<xsl:call-template name="archdesc-index"/>
<xsl:call-template name="archdesc-odd"/>
<xsl:call-template name="archdesc-bibliography"/>

<!--Loren ended change-->


</xsl:template>

<xsl:template name="eadheader">
<xsl:for-each select="ead/eadheader/filedesc/titlestmt">
<center><a name="a0"><img src="../../images/website/36aaa.gif"></img></a></center>
<br></br>
<h2><center>
<xsl:value-of select="titleproper"/>
</center></h2>
<h3><center>
<xsl:value-of select="subtitle"/>
</center></h3>


<!-- Loren added Author and Address info -->
      <h4>
        <center>
          <xsl:value-of select="author"/>
        </center>
      </h4>
      <h5>
        <center>
          <xsl:value-of select="sponsor"/>
        </center>
      </h5>
</xsl:for-each>
<h5 align="center"><xsl:value-of select="ead/eadheader/filedesc/publicationstmt/date"/></h5>
<ul>
<b>Contact Information</b>

<dd>Reference Department</dd>
<dd>Archives of American Art</dd>
<dd>Smithsonian Institution</dd>
<dd>Washington. D.C. 20560</dd>
<dd>www.aaa.si.edu/askus</dd>

</ul>

<hr></hr>
</xsl:template>

<!-- Loren added blockquote template -->
<xsl:template match="blockquote">
<blockquote><p style="margin-left: 30pt">
<xsl:apply-templates/>
</p></blockquote>
</xsl:template>

<!-- The following templates format the display of various RENDER attributes.-->

<xsl:template match="*/title">
<xsl:apply-templates/>
</xsl:template>

<xsl:template match="*/emph">
<xsl:apply-templates/>
</xsl:template>

<xsl:template match="*[@render='bold']">
<b>
<xsl:value-of select="."/>
</b>
</xsl:template>

<xsl:template match="*[@render='italic']">
<i>
<xsl:value-of select="."/>
</i>
</xsl:template>

<xsl:template match="*[@render='underline']">
<u>
<xsl:value-of select="."/>
</u>
</xsl:template>

<xsl:template match="*[@render='sub']">
<sub>
<xsl:value-of select="."/>
</sub>
</xsl:template>

<xsl:template match="*[@render='super']">
<super>
<xsl:value-of select="."/>
</super>
</xsl:template>

<xsl:template match="*[@render='quoted']">
<xsl:text>"</xsl:text>
<xsl:value-of select="."/>
<xsl:text>"</xsl:text>
</xsl:template>

<xsl:template match="*[@render='boldquoted']">
<b><xsl:text>"</xsl:text>
<xsl:value-of select="."/>
<xsl:text>"</xsl:text></b>
</xsl:template>

<xsl:template match="*[@render='boldunderline']">
<b><u>
<xsl:value-of select="."/>
</u></b>
</xsl:template>

<xsl:template match="*[@render='bolditalic']">
<b><i>
<xsl:value-of select="."/>
</i></b>
</xsl:template>

<xsl:template match="*[@render='boldsmcaps']">
<font style="font-variant: small-caps"><b>
<xsl:value-of select="."/>
</b></font>
</xsl:template>

<xsl:template match="*[@render='smcaps']">
<font style="font-variant: small-caps">
<xsl:value-of select="."/>
</font>
</xsl:template>


<!-- This template converts a Ref element into an HTML anchor.-->

<xsl:template match="ead/archdesc//ref">
<xsl:variable name="target">
<xsl:value-of select="@target"/>
</xsl:variable>
<a href="#{$target}">
<xsl:value-of select="."/>
</a>
</xsl:template>

<!-- Converts an ID attribute into the name attribute of an HTML anchor to form the target of a Ref element.-->

<xsl:template match="*[@id]">
<a name="{@id}">
<xsl:value-of select="."/>
</a>
</xsl:template>


<!--This template rule formats a list element.-->
<xsl:template match="ead/archdesc/list">
<xsl:for-each select="item">
<p style="margin-left: 60pt">
<xsl:apply-templates/>
</p>
</xsl:for-each>
</xsl:template>

<!-- Loren added to format subseries list.
This template rule formats a subseries list.
<xsl:template match="ead/archdesc//list">
<xsl:for-each select="item">
<p><a><xsl:attribute name="href">#subseries<xsl:number level="multiple"/>
</xsl:attribute>
<xsl:apply-templates select="."/>
</a>
</p>
</xsl:for-each>
</xsl:template>
Loren end add to format subseries list.-->

<!--Formats a simple table. The width of each column is defined by the colwidth attribute in a colspec element.-->
<xsl:template match="*/table">
<xsl:for-each select="tgroup">
<table width="100%">
<tr>
<xsl:for-each select="colspec">
<td width="{@colwidth}"></td>
</xsl:for-each>
</tr>
<xsl:for-each select="thead">
<xsl:for-each select="row">
<tr>
<xsl:for-each select="entry">
<td valign="top"><b><xsl:value-of select="."/></b>
</td>
</xsl:for-each>
</tr>
</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="tbody">
<xsl:for-each select="row">
<tr>
<xsl:for-each select="entry">
<td valign="top"><xsl:value-of select="."/></td>
</xsl:for-each>
</tr>
</xsl:for-each>
</xsl:for-each>
</table>
</xsl:for-each>
</xsl:template>


<!--This template rule formats the top-level did element.-->
<xsl:template name="archdesc-did">
<xsl:variable name="file">
<xsl:value-of select="ead/eadheader/eadid"/>
</xsl:variable>


<!--For each element of the did, this template inserts the value of the LABEL attribute or, if none is present, a default value.-->

<xsl:for-each select="ead/archdesc/did">
<table width="100%">
<tr><td width="5%"> </td><td width="20%"> </td>
<td width="75"> </td></tr>
<tr><td colspan="3"><h3><a name="a1">
<xsl:apply-templates select="head"/>
</a></h3> </td></tr>

<xsl:if test="origination[string-length(text()|*)!=0]">
<xsl:for-each select="origination">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top"><b>
<xsl:value-of select="@label"/>
</b></td><td>
<xsl:apply-templates select="."/>
</td></tr>
</xsl:when>
<xsl:otherwise>
<tr><td> </td><td valign="top">
<b><xsl:text>Creator: </xsl:text></b></td><td>
<xsl:apply-templates select="."/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>
</xsl:if>

<!-- Tests for and processes various permutations of unittitle and unitdate.-->
<xsl:for-each select="unittitle">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top"><b>
<xsl:value-of select="@label"/>
</b></td><td>
<xsl:apply-templates select="text() |* [not(self::unitdate)]"/>
</td></tr>
</xsl:when>
<xsl:otherwise>
<tr><td> </td><td valign="top"><b>
<xsl:text>Title: </xsl:text>
</b></td><td>
<xsl:apply-templates select="text() |* [not(self::unitdate)]"/>
</td></tr>
</xsl:otherwise>
</xsl:choose>

<xsl:if test="child::unitdate">
<xsl:choose>
<xsl:when test="./unitdate/@label">
<tr><td> </td><td valign="top">
<b>
<xsl:value-of select="./unitdate/@label"/>
</b></td><td>
<xsl:apply-templates select="./unitdate"/>
</td></tr>
</xsl:when>
<xsl:otherwise>
<tr><td> </td><td valign="top">
<b>
<xsl:text>Dates: </xsl:text>
</b></td><td>
<xsl:apply-templates select="./unitdate"/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:if>
</xsl:for-each>

<!-- Processes the unit date if it is not a child of unit title but a child of did, the current context.-->
<xsl:if test="unitdate">
<xsl:for-each select="unitdate[string-length(text()|*)!=0]">
<xsl:choose>
<xsl:when test="./@label">
<tr><td> </td><td valign="top">
<b>
<xsl:value-of select="./@label"/>
</b></td><td>
<xsl:apply-templates select="."/>
</td></tr>
</xsl:when>
<xsl:otherwise>
<tr><td> </td><td valign="top">
<b>
<xsl:text>Dates: </xsl:text>
</b></td><td>
<xsl:apply-templates select="."/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>
</xsl:if>

<xsl:if test="abstract[string-length(text()|*)!=0]">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top">
<b><xsl:value-of select="@label"/>
</b></td><td>
<xsl:apply-templates select="abstract"/>
</td></tr>
</xsl:when>
<xsl:otherwise>
<tr><td> </td><td valign="top">
<b><xsl:text>Abstract: </xsl:text></b></td><td>
<xsl:apply-templates select="abstract"/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:if>

<xsl:if test="physdesc[string-length(text()|*)!=0]">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top">
<b><xsl:value-of select="@label"/>
</b></td><td>
<xsl:apply-templates select="physdesc"/>
</td></tr>
</xsl:when>

<xsl:otherwise>
<tr><td> </td><td valign="top">
<b><xsl:text>Extent: </xsl:text></b></td><td>
<xsl:apply-templates select="physdesc"/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:if>

<xsl:if test="unitid[string-length(text()|*)!=0]">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top">
<b><xsl:value-of select="@label"/>
</b></td><td>
<xsl:apply-templates select="unitid"/>
</td></tr>
</xsl:when>

<xsl:otherwise>
<tr><td> </td><td valign="top">
<b><xsl:text>Identification: </xsl:text></b></td><td>
<xsl:apply-templates select="unitid"/>

</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:if>

<xsl:if test="physloc[string-length(text()|*)!=0]">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top">
<b><xsl:value-of select="@label"/>
</b></td><td>
<xsl:apply-templates select="physloc"/>
</td></tr>
</xsl:when>

<xsl:otherwise>
<tr><td> </td><td valign="top">
<b><xsl:text>Location: </xsl:text></b></td><td>
<xsl:apply-templates select="physloc"/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:if>

<xsl:if test="note[string-length(text()|*)!=0]">
<xsl:for-each select="note">
<xsl:choose>
<xsl:when test="@label">
<tr><td> </td><td valign="top">
<b><xsl:value-of select="@label"/>
</b></td></tr>
<xsl:for-each select="p">
<tr><td> </td><td valign="top">
<xsl:apply-templates/>
</td></tr>
</xsl:for-each>
</xsl:when>

<xsl:otherwise>
<tr><td> </td><td valign="top">
<b>Location:</b></td><td>
<xsl:apply-templates select="note"/>
</td></tr>
</xsl:otherwise>
</xsl:choose>
</xsl:for-each>
</xsl:if>

</table>
<hr></hr>

</xsl:for-each>
</xsl:template>

<!--Loren inserts Restriction, Index Terms and all other admin info -->

<!--Steph added -->

<!--This template rule formats a top-level admininfo element.-->
<xsl:template name="archdesc-admininfo">
<xsl:if test="ead/archdesc/acqinfo[string-length(text()|*)!=0] | ead/archdesc/processinfo[string-length(text()|*)!=0] | ead/archdesc/prefercite[string-length(text()|*)!=0] | ead/archdesc/custodialhist[string-length(text()|*)!=0] | ead/archdesc/altformavail[string-length(text()|*)!=0] | ead/archdesc/appraisal[string-length(text()|*)!=0] | ead/archdesc/accruals[string-length(text()|*)!=0] | ead/archdesc/originalsloc[string-length(text()|*)!=0]">
<h3>
<a name="a14">
<b><xsl:text>Administrative Information</xsl:text>
</b></a></h3>
<xsl:for-each select="ead/archdesc/acqinfo">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="ead/archdesc/processinfo">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="ead/archdesc/prefercite">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<xsl:for-each select="ead/archdesc/custodialhist">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<xsl:for-each select="ead/archdesc/altformavail">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<xsl:for-each select="ead/archdesc/appraisal">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<xsl:for-each select="ead/archdesc/accruals">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<xsl:for-each select="ead/archdesc/originalsloc">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>

<!--This template rule formats a top-level accessretrict element.-->
<xsl:template name="archdesc-restrict">
<xsl:if test="ead/archdesc/accessrestrict[string-length(text()|*)!=0] | ead/userestrict[string-length(text()|*)!=0]">
<h3>
<a name="a14">
<b><xsl:text>Restrictions</xsl:text>
</b></a></h3>
<xsl:for-each select="ead/archdesc/accessrestrict">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>

<xsl:for-each select="ead/archdesc/userestrict">
<h4 style="margin-left : 15pt"><b><xsl:value-of select="head"/></b></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>



<!--This template rule formats a top-level custodhist element.-->
<xsl:template name="archdesc-custodhist">
<xsl:if test="ead/archdesc/custodhist[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/custodhist">
<h4 style="margin-left : 15pt">
<a name="a16">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>


<!--This template rule formats a top-level altformavail element.-->
<xsl:template name="archdesc-altform">
<xsl:if test="ead/archdesc/altformavail[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/altformavail">
<h4 style="margin-left : 15pt">
<a name="a17">
<b><xsl:apply-templates select="head"/>
</b></a></h4>


<xsl:for-each select="altformavail [@type='microfilm']">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>

<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>



<!--This template rule formats a top-level prefercite element.-->
<xsl:template name="archdesc-prefercite">
<xsl:if test="ead/archdesc/prefercite[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/prefercite">
<h4 style="margin-left : 15pt">
<a name="a18">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>


<!--This template rule formats a top-level acqinfo element.-->
<xsl:template name="archdesc-acqinfo">
<xsl:if test="ead/archdesc/acqinfo[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/acqinfo">
<h4 style="margin-left : 15pt">
<a name="a19">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>

<!--This template rule formats a top-level procinfo element.-->
<xsl:template name="archdesc-processinfo">
<xsl:if test="ead/archdesc/processinfo[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/processinfo">
<h4 style="margin-left : 15pt">
<a name="a20">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>

<!--This template rule formats a top-level appraisal element.-->
<xsl:template name="archdesc-appraisal">
<xsl:if test="ead/archdesc/appraisal[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/appraisal">
<h4 style="margin-left : 15pt">
<a name="a21">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>

<!--This template rule formats a top-level accruals element.-->
<xsl:template name="archdesc-accruals">
<xsl:if test="ead/archdesc/accruals[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/accruals">
<h4 style="margin-left : 15pt">
<a name="a22">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 25pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>

<!--This template rule formats a top-level originalsloc element.-->
<xsl:template name="archdesc-originalsloc">
<xsl:if test="ead/archdesc/originalsloc[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/originalsloc">
<h4 style="margin-left : 15pt">
<a name="a24">
<b><xsl:apply-templates select="head"/>
</b></a></h4>
<xsl:for-each select="p">
<p style="margin-left : 25pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:if>
</xsl:template>

<!-- Loren end insert -->

<!--This template rule formats the top-level bioghist element.-->
<xsl:template name="archdesc-bioghist">
<xsl:variable name="file">
<xsl:value-of select="ead/eadheader/eadid"/>
</xsl:variable>

<xsl:if test="ead/archdesc/bioghist[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/bioghist">
<xsl:apply-templates/>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:for-each>
</xsl:if>
</xsl:template>

<xsl:template match="ead/archdesc/bioghist/head">
<h3><a name="a2">
<xsl:apply-templates/>
</a></h3>
</xsl:template>

<xsl:template match="ead/archdesc/bioghist/p">
<p style="margin-left: 30pt">
<xsl:apply-templates/>
</p>
</xsl:template>

<xsl:template match="ead/archdesc/bioghist/chronlist">
<xsl:apply-templates/>
</xsl:template>

<xsl:template match="ead/archdesc/bioghist/bioghist">
<h3>
<xsl:apply-templates select="head"/>
</h3>
<xsl:for-each select="p">
<p style="margin-left: 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:template>

<xsl:template match="ead/archdesc/odd/chronlist">
<xsl:apply-templates/>
</xsl:template>

<!--This template rule formats a chronlist element.-->

<xsl:template match="*/chronlist">
<table width="100%">
<tr><td width="5%"> </td><td width="30%"> </td>
<td width="65%"> </td></tr>

<xsl:for-each select="listhead">
<tr><td> </td><td><b>
<xsl:apply-templates select="head01"/>
</b></td>
<td><b>
<xsl:if test="head02[string-length(text()|*)!=0]">
<xsl:apply-templates select="head02"/>
</xsl:if>
</b></td></tr>
</xsl:for-each>

<xsl:for-each select="chronitem">
<tr><td> </td><td valign="top">
<xsl:apply-templates select="date"/>
</td>
<td valign="top">
<xsl:apply-templates select="event"/>
</td></tr>
</xsl:for-each>
</table>
</xsl:template>

<!--This template rule formats a list element.-->

<xsl:template match="*/list">
<table width="100%">
<tr><td width="3%"> </td><td width="50%" align="left"> </td></tr>
<tr><td> </td><td><b>
<xsl:apply-templates select="head"/>
</b></td></tr>
<xsl:for-each select="item">
<tr><td> </td><td valign="top">
<xsl:apply-templates select="."/>
</td>
</tr>
</xsl:for-each>
</table>
</xsl:template>

<!--This template rule formats the scopecontent element.-->
<xsl:template name="archdesc-scopecontent">
<xsl:if test="ead/archdesc/scopecontent[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/scopecontent">
<xsl:apply-templates/>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>

<xsl:template match="ead/archdesc/scopecontent/head">
<h3><a name="a3">
<xsl:apply-templates/>
</a></h3>
</xsl:template>

<!-- This formats an arrangement list embedded in a scope content statement.-->
<xsl:template match="ead/archdesc/scopecontent/arrangement">
<xsl:for-each select="p">
<p style="margin-left: 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
<xsl:for-each select="list">
<xsl:for-each select="item">
<p style="margin-left: 60pt">
<a><xsl:attribute name="href">#series<xsl:number/>
</xsl:attribute>
<xsl:apply-templates select="."/>
</a>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:template>

<xsl:template match="ead/archdesc/scopecontent/p">
<p style="margin-left: 30pt">
<xsl:apply-templates/>
</p>
</xsl:template>



<!--This template rule formats the arrangement element.-->
<xsl:template name="archdesc-arrangement">
<xsl:if test="ead/archdesc/arrangement[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/arrangement">
<table width="100%">
<tr><td width="5%"> </td><td width="5%"> </td>
<td width="90%"> </td></tr>

<tr><td colspan="3"> <h3><a name="a4">
<xsl:apply-templates select="head"/>
</a></h3>
</td></tr>

<xsl:for-each select="p">
<tr><td> </td><td colspan="2">
<br /><xsl:apply-templates select="."/><br />
</td></tr>
</xsl:for-each>

<xsl:for-each select="list">
<tr><td> </td><td colspan="2">
<xsl:apply-templates select="head"/>
</td></tr>
<xsl:for-each select="item">
<tr><td> </td><td> </td><td colspan="1">
<a><xsl:attribute name="href">#series<xsl:number/>
</xsl:attribute>
<xsl:apply-templates select="."/>
</a>
</td></tr>
</xsl:for-each>
</xsl:for-each>
</table>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>
<!--Steph took out section here.-->




<!--This template rule formats the top-level relatedmaterial element.-->
<xsl:template name="archdesc-relatedmaterial">
<xsl:if test="ead/archdesc/relatedmaterial[string-length(text()|*)!=0]">
<h3><a name="a6">
<b><xsl:text>Related Material</xsl:text>
</b></a></h3>
<xsl:for-each select="ead/archdesc/relatedmaterial">
<xsl:apply-templates select="*[not(self::head)]"/>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>

<!--This template rule formats the top-level separatedmaterial element.-->
<xsl:template name="archdesc-separatedmaterial">
<xsl:if test="ead/archdesc/separatedmaterial[string-length(text()|*)!=0]">
<h3><a name="a7">
<b><xsl:text>Separated Material</xsl:text>
</b></a></h3>
<xsl:for-each select="ead/archdesc/separatedmaterial">
<xsl:apply-templates select="*[not(self::head)]"/>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>


<xsl:template match="ead/archdesc/relatedmaterial/p">
<p style="margin-left : 30pt">
<xsl:apply-templates/>
</p>
</xsl:template>

<xsl:template match="ead/archdesc/separatedmaterial/p">
<p style="margin-left : 30pt">
<xsl:apply-templates/>
</p>
</xsl:template>

<!--This template rule formats the top-level otherfindaid element.-->
<xsl:template name="archdesc-otherfindaid">
<xsl:if test="ead/archdesc/otherfindaid[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/otherfindaid">
<h3><a name="a8">
<b><xsl:apply-templates select="head"/>
</b></a></h3>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>


<!--This template rule formats the top-level index element.-->
<xsl:template name="archdesc-index">
<xsl:if test="ead/archdesc/index[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/index">
<h3><a name="a9">
<b><xsl:apply-templates select="head"/>
</b></a></h3>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>

				

<!--This template rule formats the top-level bibliography element.-->
<xsl:template name="archdesc-bibliography">
<xsl:if test="ead/archdesc/bibliography[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/bibliography">
<h3><a name="a10">
<b><xsl:apply-templates select="head"/>
</b></a></h3>
<xsl:for-each select="p">
<xsl:for-each select="bibref">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>

<!--This template rule formats the top-level odd element.-->
<xsl:template name="archdesc-odd">
<xsl:if test="ead/archdesc/odd[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/odd">
<h3><a><xsl:attribute name="name">appendix<xsl:number/>
<xsl:variable name="number"><xsl:number/></xsl:variable>
</xsl:attribute><xsl:text>&#160;</xsl:text>

<b><xsl:apply-templates select="head"/>
</b></a></h3>
<xsl:for-each select="p">
<p style="margin-left : 30pt">
<xsl:apply-templates select="."/>
</p>
</xsl:for-each>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>

<xsl:template name="archdesc-control">
<xsl:if test="ead/archdesc/controlaccess[string-length(text()|*)!=0]">
<xsl:for-each select="ead/archdesc/controlaccess">
<table width="100%">
<tr><td width="5%"> </td><td width="5%"> </td>
<td width="90%"> </td></tr>

<tr><td colspan="3"><h3><a name="a12">
<xsl:apply-templates select="head"/>
</a></h3> </td></tr>

<tr><td> </td><td colspan="2">
<xsl:apply-templates select="p"/>
</td></tr>

<xsl:for-each select="./controlaccess">
<tr><td> </td><td colspan="2"><b>
<xsl:apply-templates select="head"/>
</b></td></tr>

<xsl:for-each select="subject |corpname | persname | famname| genreform | title | geogname | occupation">
<xsl:sort select="."/>
<tr><td><xsl:text>&#160;</xsl:text></td><td><xsl:text>&#160;</xsl:text></td><td>
<xsl:apply-templates select="."/>
</td></tr>
</xsl:for-each>
</xsl:for-each>
</table>
</xsl:for-each>
<p>
<a href="#a0">Return to the Table of Contents</a>
</p>
<hr></hr>
</xsl:if>
</xsl:template>


<xsl:template name="dsc">
  <xsl:for-each select="ead/archdesc/dsc">
  <h3>
  <a name="a23">
    <xsl:apply-templates select="head"/>
  </a>
  </h3>

  <p style="margin-left: 25 pt">
  <i>
    <xsl:apply-templates select="p"/>
  </i>
  </p>
    <xsl:apply-templates select="c01"/>

  </xsl:for-each>
</xsl:template>



<xsl:template name="unittitle-stuff">
<!--This named template defines the processing of unittitle and unitdates in a way that
is applicable at all component levels.   It is invoked throughout the following templates.
Unitdates may be the children either of unittitle or did.  This templates sorts those options
out.  It also includes conditional processing to handle situations where unitdate elements are
included in the markup but empty of PCDATA content.-->
<xsl:choose>
<!--When unitdate is a child of unittitle.-->
  <xsl:when test="unittitle/unitdate">
    <xsl:for-each select="unittitle">
      <!--Inserts the text of unittitle and any children other than unitdate.-->
      <xsl:apply-templates select="text()|*[not(self::unitdate)]"/>
        <!--Tests to see if the unitdate has content and adds it and separating space
        if it does.-->
        <xsl:if test="string-length(./unitdate)!=0">
          <xsl:text> </xsl:text>
          <xsl:apply-templates select="./unitdate"/>
        </xsl:if>
    </xsl:for-each>
  </xsl:when>
<!--When unitdate is a child of did.-->
<xsl:otherwise>
  <xsl:apply-templates select="unittitle"/>
  <xsl:if test="string-length(unitdate)!=0">
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="unitdate"/>
  </xsl:if>
</xsl:otherwise>
</xsl:choose>
</xsl:template>

<!--This template  creates a table for each c01 and applies templates for c01 children.-->
<xsl:template match="c01">
<table width="600">
  <tr>
  <td width="60"></td><td width="60"></td><td width="60"></td>
  <td width="60"></td><td width="60"></td><td width="60"></td>
  <td width="60"></td><td width="60"></td><td width="60"></td>
  <td width="60"></td>
  </tr>
  <a><xsl:attribute name="name">series<xsl:number/>
  <xsl:variable name="number"><xsl:number/></xsl:variable>
  </xsl:attribute><xsl:text>&#160;</xsl:text>
  </a>
  <xsl:apply-templates select="did"/>
  <xsl:apply-templates select="scopecontent"/>
  <xsl:apply-templates select="arrangement"/>
  <xsl:apply-templates select="c02"/>
</table>
</xsl:template>

<xsl:template match="c01/did">
  <tr>
    <td colspan="10">
    <h3>  <a><xsl:attribute name="name">#series<xsl:number/>
      </xsl:attribute>
      </a>
        <xsl:apply-templates select="head"/>

      <xsl:apply-templates select="unitid"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:call-template name="unittitle-stuff"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:apply-templates select="physdesc"/>
    </h3>
    </td>
  </tr>
</xsl:template>

<xsl:template match="c01/scopecontent | bioghist">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>
<xsl:template match="c01/arrangement">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<xsl:template match="c01/arrangement">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<xsl:template match="c01/arrangement/p/list">
    <xsl:for-each select="item">
      <tr>
        <td></td>
        <td></td>
        <td colspan="8">
        <!--Creates a link that points to the subseries.  Counts first
        the number of the parent c01 and then the position of the
        item within the list.  The number so formed corresponds
        to the unitid of the subseries to which the link goes.-->
        <a>
          <xsl:attribute name="href">
          <xsl:text>#</xsl:text>
          <xsl:number count="c01" from="dsc"/>
          <xsl:text>.</xsl:text>
          <xsl:number count="item" from="list"/>
          </xsl:attribute>
          <xsl:value-of select="."/>
        </a>
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<xsl:template match="c02">
  <xsl:apply-templates select="did"/>
  <xsl:apply-templates select="scopecontent"/>
  
  <xsl:apply-templates select="c03"/>
  </xsl:template>

<xsl:template match="c02/did">

<!--There are two possibiliites for a c02.  Either it is a subseries or a file
with containers.  The first option covers cases where it is a subseries,
the second when it is a file with containers.-->

<!--Creates two variables for testing container values.-->
<!-- changed these variables to refer to the nodes, not hold
     their values - wap -->
  <xsl:variable name="boxnumber" select="container[@type='box']"/>
  <xsl:variable name="prevboxnumber" select="preceding::container[@type='box'][1]"/>


<xsl:choose>
<!--When the level of the parent c02 is a subseries,... -->
<xsl:when test="../@level='subseries'">
<tr>
  <td colspan="10"></td>
</tr>
<tr>
  <td colspan="10" align="left" valign="top">
    <h4>
    <!--Creates a link target.-->
    <a>
      <xsl:attribute name="name">
        <xsl:number count="c01" from="dsc"/>
        <xsl:text>.</xsl:text>
        <xsl:number count="c02" from="c01"/>
      </xsl:attribute>
      <xsl:apply-templates select="unitid"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:call-template name="unittitle-stuff"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:apply-templates select="physdesc"/>
    </a>
    </h4>
  </td>
  </tr>


</xsl:when>

<!--Processes cases where a c02 is a file, not a subseries.-->
<xsl:otherwise>


<xsl:choose>

<!--The first option selects cases where either the value of the box container is the same as that of a previous component.   In that case, no column labels are added and only the folder number appears
along with the other component data.-->

<xsl:when test="not($boxnumber = $prevboxnumber)
or (not(../preceding-sibling::c02[1]) and ((../../@level) or (../../@otherlevel)))" >
  
<!--Selects cases where the value of the box is not the same as
that of a previous component.   In that case, column labels are added and both the
box numbers appear along with the other component data.-->

  <tr>
    <td><br /><b>Box</b></td>
  </tr>
  <tr>
    	<td valign="top">
            <xsl:value-of select="$boxnumber"/>
       </td>
        
    <td colspan="8" align="left" valign="top">
    <a>
      <xsl:attribute name="name">
        <xsl:number count="c01" from="dsc"/>
        <xsl:text>.</xsl:text>
        <xsl:number count="c02" from="c01"/>
      </xsl:attribute>
      <xsl:apply-templates select="unitid"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:call-template name="unittitle-stuff"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:apply-templates select="physdesc"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:apply-templates select="abstract"/>
    </a>
    </td>
  </tr>
</xsl:when>
<xsl:otherwise>
<!--Selects cases where the value of the box container is the same as that of a previous
      component.   In that case, no column labels are added and only the folder number appears
      along with the other component data.-->
<tr>
    <td valign="top"> </td>
    
    <td colspan="9" align="left" valign="top">
      <a>
      <xsl:attribute name="name">
        <xsl:number count="c01" from="dsc"/>
        <xsl:text>.</xsl:text>
        <xsl:number count="c02" from="c01"/>
      </xsl:attribute>
      <xsl:apply-templates select="unitid"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:call-template name="unittitle-stuff"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:apply-templates select="physdesc"/>
      <xsl:text>&#160;</xsl:text>
      <xsl:apply-templates select="abstract"/>
      </a>
    </td>
  </tr>
<!--This closes the options where c02 is not a subseries and has containers associated
with it.-->
</xsl:otherwise>
</xsl:choose>
<!--This closes the two options for c02-->
</xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match="c02/bioghist">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<!-- Loren added changes for scope notes -->
<xsl:template match="c02/scopecontent">
<xsl:choose>
<xsl:when test="../@level='subseries'">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:when>
<xsl:otherwise>
  <tr>
    <td> </td> <td> </td><td> </td>
    <td style="text-align:left" valign="top" colspan="7">
      <xsl:apply-templates select="p"/>
    </td>
  </tr>
</xsl:otherwise>
</xsl:choose>
</xsl:template>
<!-- Loren end add changes for scope notes -->

<xsl:template match="c03">
  <xsl:apply-templates select="did"/>
  <xsl:apply-templates select="scopecontent"/>
  <xsl:apply-templates select="c04"/>
</xsl:template>

<xsl:template match="c03/did">
<!--There are two options for c03.  It is either a subsubseries or a file.-->

<!--Creates two variables for testing container values.-->
<!-- changed these variables to refer to the nodes, not hold
     their values - wap -->
  <xsl:variable name="boxnumber" select="container[@type='box']"/>
  <xsl:variable name="prevboxnumber" select="preceding::container[@type='box'][1]"/>



<xsl:choose>
  <xsl:when test="../@level='subseries' or ../@otherlevel='subsubseries'">
    <tr>
      <td colspan="10" align="left" valign="top">
        <h4>
        <xsl:apply-templates select="unitid"/>
          <xsl:text>&#160;</xsl:text>
        <xsl:call-template name="unittitle-stuff"/>
          <xsl:text>&#160;</xsl:text>
        <xsl:apply-templates select="physdesc"/>
        </h4>
      </td>
    </tr>

  </xsl:when>

  <xsl:otherwise>
    <!--If c03 is a file, there are two further options.  Either has has container values to
    display or they should be suppressed.-->
    <xsl:choose>
    <xsl:when test="not($boxnumber = $prevboxnumber)
      or (not(../preceding-sibling::c03[1]) and ((../../@level) or (../../@otherlevel)))" >
        
      <!--Selects cases where the value of the box container is not the same as that of a previous
      component.   In that case, column labels are added and both the box and folder number appears
      along with the other component data.-->
      
        <tr>
          <td><br /><b>Box</b></td>
        </tr>
        <tr>
    	<td valign="top">
            <xsl:value-of select="$boxnumber"/>
         </td>
          <td> </td>
          <td colspan="8" align="left" valign="top">
            <xsl:apply-templates select="unitid"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:call-template name="unittitle-stuff"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="physdesc"/>
            <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="abstract"/>
          </td>
        </tr>
      </xsl:when>
      <xsl:otherwise>
      <!--Selects cases where the value of the box container is the same as that of a previous
      component.   In that case, no column labels are added and only the folder number appears
      along with the other component data.-->
	<tr>
					<td> </td>
          <td> </td>
          <td colspan="8" align="left" valign="top">
            <xsl:apply-templates select="unitid"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:call-template name="unittitle-stuff"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="physdesc"/>
            <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="abstract"/>
          </td>
        </tr>
       </xsl:otherwise>
    </xsl:choose>

  </xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match="c03/bioghist">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<xsl:template match="c03/scopecontent">
  <xsl:choose>
    <xsl:when test="../@otherlevel='subsubseries'">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <tr>
        <td> </td><td> </td><td> </td><td> </td>
        <td style="text-align:left" valign="top" colspan="6">
          <xsl:apply-templates select="p"/>
        </td>
      </tr>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="c04">
  <xsl:apply-templates select="did"/>
  <xsl:apply-templates select="scopecontent"/>
  <xsl:apply-templates select="c05"/>
</xsl:template>

<xsl:template match="c04/did">
<!--There are two options for c04.  It is either a subsubseries or a file.-->

<!--Creates two variables for testing container values.-->
<!-- changed these variables to refer to the nodes, not hold
     their values - wap -->
  <xsl:variable name="boxnumber" select="container[@type='box']"/>
  <xsl:variable name="prevboxnumber" select="preceding::container[@type='box'][1]"/>



<xsl:choose>
  <xsl:when test="../@otherlevel='subsubseries'">
    <tr>
      <td colspan="10" align="left" valign="top">
        <h4>
        <xsl:apply-templates select="unitid"/>
          <xsl:text>&#160;</xsl:text>
        <xsl:call-template name="unittitle-stuff"/>
          <xsl:text>&#160;</xsl:text>
        <xsl:apply-templates select="physdesc"/>
        </h4>
      </td>
    </tr>

  </xsl:when>

  <xsl:otherwise>
    <!--If c04 is a file, there are two further options.  Either has has container values to
    display or they should be suppressed.-->

    <xsl:choose>
      <xsl:when test="not($boxnumber = $prevboxnumber)
      or (not(../preceding-sibling::c04[1]) and ((../../@level) or (../../@otherlevel)))" >

      <!-- Selects cases where the value of the box container is not the same as that of a previous
      component.   In that case, column labels are added and both the box and folder number appears
      along with the other component data. -->
      <!-- wap - also selects cases where this is the first c04 in a c03.
                 column labels are added but labels are *not* supplied. -->

        <tr>
          <td><br /><b>Box</b></td>
        </tr>
        <tr>
          <td valign="top">
            <xsl:value-of select="$boxnumber"/>
          </td>
          <td> </td>
          <td> </td>
          <td colspan="6" align="left" valign="top">
            <xsl:apply-templates select="unitid"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:call-template name="unittitle-stuff"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="physdesc"/>
            <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="abstract"/>
          </td>
        </tr>


      </xsl:when>


      <xsl:otherwise>
      <!--Selects cases where the value of the box container is the same as that of a previous
      component.   In that case, no column labels are added and only the folder number appears
      along with the other component data.-->

        <tr>
          <td> </td>
          <td> </td>
          <td> </td>
          <td colspan="7" align="left" valign="top">
            <xsl:apply-templates select="unitid"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:call-template name="unittitle-stuff"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="physdesc"/>
            <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="abstract"/>
          </td>
        </tr>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match="c04/bioghist">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<xsl:template match="c04/scopecontent">
  <xsl:choose>
    <xsl:when test="../@otherlevel='subsubseries'">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <tr>
        <td> </td><td> </td><td> </td><td> </td><td> </td>
        <td style="text-align:left" valign="top" colspan="5">
          <xsl:apply-templates select="p"/>
        </td>
      </tr>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>



<xsl:template match="c05">
  <xsl:apply-templates select="did"/>
  <xsl:apply-templates select="scopecontent"/>

</xsl:template>

<xsl:template match="c05/did">
<!--There are two options for c05.  It is either a subsubseries or a file.-->

<!--Creates two variables for testing container values.-->
<!-- changed these variables to refer to the nodes, not hold
     their values - wap -->
  <xsl:variable name="boxnumber" select="container[@type='box']"/>
  <xsl:variable name="prevboxnumber" select="preceding::container[@type='box'][1]"/>


<xsl:choose>
  <xsl:when test="../@otherlevel='subsubseries'">
    <tr>
      <td colspan="10" align="left" valign="top">
        <h4>
        <xsl:apply-templates select="unitid"/>
          <xsl:text>&#160;</xsl:text>
        <xsl:call-template name="unittitle-stuff"/>
          <xsl:text>&#160;</xsl:text>
        <xsl:apply-templates select="physdesc"/>
        </h4>
      </td>
    </tr>

  </xsl:when>

  <xsl:otherwise>
    <!--If c05 is a file, there are two further options.  Either has has container values to
    display or they should be suppressed.-->

    <xsl:choose>
      <xsl:when test="not($boxnumber = $prevboxnumber)
      or (not(../preceding-sibling::c05[1])  and ((../../@level) or (../../@otherlevel)))">

      
      <!--Selects cases where the value of the box container is not the same as that of a previous
      component.   In that case, column labels are added and both the box and folder number appears
      along with the other component data.-->
            <!-- wap - also selects cases where this is the first c05 in a c04.
                 column labels are added but labels are *not* supplied. -->

        <tr>
          <td><br /><b>Box</b></td>
        </tr>
        <tr>
          <td valign="top">
            <xsl:value-of select="$boxnumber"/>
          </td>
          <td> </td>
          <td> </td>
          <td> </td>
          <td colspan="5" align="left" valign="top">
            <xsl:apply-templates select="unitid"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:call-template name="unittitle-stuff"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="physdesc"/>
            <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="abstract"/>
          </td>
        </tr>
      </xsl:when>


      <xsl:otherwise>
<!--Selects cases where the value of the box container is the same as that of a previous
      component.   In that case, no column labels are added and only the folder number appears
      along with the other component data.-->

        <tr>
          <td> </td>
          <td> </td>
          <td> </td>
          <td> </td>
          <td colspan="6" align="left" valign="top">
            <xsl:apply-templates select="unitid"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:call-template name="unittitle-stuff"/>
              <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="physdesc"/>
            <xsl:text>&#160;</xsl:text>
            <xsl:apply-templates select="abstract"/>
          </td>
        </tr>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:otherwise>
</xsl:choose>
</xsl:template>

<xsl:template match="c05/bioghist">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
</xsl:template>

<xsl:template match="c05/scopecontent">
  <xsl:choose>
    <xsl:when test="../@otherlevel='subsubseries'">
    <xsl:for-each select="p">
      <tr>
        <td style="text-align:left" valign="top" colspan="10">
        <br /><xsl:apply-templates select="."/><br />
        </td>
      </tr>
    </xsl:for-each>
    </xsl:when>
    <xsl:otherwise>
      <tr>
        <td> </td><td> </td><td> </td><td> </td><td> </td><td> </td>
        <td style="text-align:left" valign="top" colspan="4">
          <xsl:apply-templates select="p"/>
        </td>
      </tr>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>
</xsl:stylesheet>